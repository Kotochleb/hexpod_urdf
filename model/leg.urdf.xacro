<?xml version="1.0" encoding="utf-8"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- LEG MACRO -->
  <xacro:macro name="leg" params="leg_prefix reflect leg_pos props_path">

    <xacro:property name="yaml_file" value="${props_path}" />
    <xacro:property name="robot_props" value="${load_yaml(yaml_file)}" />

    <!-- CONDITIONAL BLOCKS -->
    <xacro:if value="${reflect}"> <xacro:property name="reflect_multiplier" value="-1" /> </xacro:if>
    <xacro:if value="${not reflect}"> <xacro:property name="reflect_multiplier" value="1" />   </xacro:if>

    <xacro:if value="${leg_pos=='rear'}"> <xacro:property name="leg_pos_val" value="${-robot_props['body']['link']['length']/2}" /> </xacro:if>
    <xacro:if value="${leg_pos=='central'}"> <xacro:property name="leg_pos_val" value="0" /> </xacro:if>
    <xacro:if value="${leg_pos=='front'}"> <xacro:property name="leg_pos_val" value="${robot_props['body']['link']['length']/2}" /> </xacro:if>


    <!-- LEG LINK -->
    <xacro:macro name="leg_link" params="props">
      <link name="${leg_prefix}_${props['name']}">
        <visual>
          <geometry>
            <xacro:property name="mesh_file" value="${props['link']['mesh_file']}" />
            <xacro:if value="${mesh_file == 'None'}">
              <cylinder length="${props['link']['length']}"
                        radius="${props['link']['radius']}" />
            </xacro:if>
            <xacro:if value="${mesh_file != 'None'}">
              <mesh filename="${mesh_file}" scale="1 1 1" />
            </xacro:if>
            <!-- <material name="${props['link']['material']}"/> -->
          </geometry>

          <xacro:property name="props_name" value="${props['name']}" />
          <xacro:if value="${props_name == 'coxa'}">
            <origin rpy="${props['link']['rpy'][0]}
                         ${props['link']['rpy'][1]}
                         ${props['link']['rpy'][2]}"
                    xyz="${props['link']['origin'][0]}
                         ${props['link']['origin'][1]*reflect_multiplier}
                         ${props['link']['origin'][2]}"/>
          </xacro:if>
          <xacro:if value="${props_name != 'coxa'}">
            <origin xyz="${props['link']['origin'][0]}
                         ${props['link']['origin'][1]}
                         ${props['link']['origin'][2]}"
                    rpy="${props['link']['rpy'][0]}
                         ${props['link']['rpy'][1]}
                         ${props['link']['rpy'][2]}"/>
          </xacro:if>
        </visual>

        <collision>
          <geometry>
            <sphere radius="${props['link']['radius']}" />
          </geometry>
          <origin xyz="0 0 -${(props['link']['length']-(props['link']['radius']/2))}"
                  rpy="0 0 0" />
        </collision>

        <inertial>
          <mass value="${props['inertial']['mass']}" />
          <inertia ixx="${props['inertial']['inertia']['ixx']}"
                   ixy="${props['inertial']['inertia']['ixy']}"
                   ixz="${props['inertial']['inertia']['ixz']}"
                   iyy="${props['inertial']['inertia']['iyy']}"
                   iyz="${props['inertial']['inertia']['iyz']}"
                   izz="${props['inertial']['inertia']['izz']}" />
        </inertial>
      </link>
    </xacro:macro>



    <!-- LEG JOINT -->
    <xacro:macro name="leg_joint" params="parent child axis">
      <joint name="${leg_prefix}_${parent['name']}_to_${child['name']}_joint"
             type="revolute">

        <xacro:property name="parent_name" value="${parent['name']}" />
        <xacro:if value="${parent_name == 'base_link'}">
          <parent link="base_link" />
          <origin xyz="${leg_pos_val}
                       ${reflect_multiplier*robot_props['body']['link']['width']/2}
                       0"
                  rpy="${reflect_multiplier*pi/2} 0 0" />
        </xacro:if>

        <xacro:if value="${not (parent_name == 'base_link')}">
          <parent link="${leg_prefix}_${parent['name']}" />
          <origin xyz="${child['joint']['origin'][0]}
                       ${child['joint']['origin'][1]}
                       ${child['joint']['origin'][2]}"
                  rpy="0 0 0" />
        </xacro:if>

        <child link="${leg_prefix}_${child['name']}" />
        <axis xyz="${axis}" />

        <xacro:property name="low_lim" value="${child['joint']['limit']['lower']}" />
        <xacro:property name="up_lim" value="${child['joint']['limit']['upper']}" />
        <limit effort="${robot_props['servo']['effort']}"
               lower="${radians(low_lim)}"
               upper="${radians(up_lim)}"
               velocity="${robot_props['servo']['velocity']}" />

      </joint>

      <!-- TRANSMITION DEFINITION -->
      <transmission name="${leg_prefix}_${parent['name']}_to_${child['name']}_transmition"
                    type="SimpleTransmission">

        <type>transmission_interface/SimpleTransmission</type>
        <joint name="${leg_prefix}_${parent['name']}_to_${child['name']}_joint">
          <hardwareInterface>EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="${leg_prefix}_${parent['name']}_to_${child['name']}_actuator">
          <hardwareInterface>EffortJointInterface</hardwareInterface>
          <mechanicalReduction>1</mechanicalReduction>
        </actuator>
      </transmission>

    </xacro:macro>

    <!-- DEFINE LINKS -->
    <xacro:leg_link props="${robot_props['coxa']}" />
    <xacro:leg_link props="${robot_props['femur']}" />
    <xacro:leg_link props="${robot_props['tibia']}" />

    <!-- DEFINE JOINTS -->
    <xacro:leg_joint parent="${robot_props['body']}"
                     child="${robot_props['coxa']}"
                     axis="0 -1 0" />

    <xacro:leg_joint parent="${robot_props['coxa']}"
                     child="${robot_props['femur']}"
                     axis="${reflect_multiplier*1} 0 0" />

    <xacro:leg_joint parent="${robot_props['femur']}"
                     child="${robot_props['tibia']}"
                     axis="${reflect_multiplier*1} 0 0" />

  </xacro:macro>

</robot>
